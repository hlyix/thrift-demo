/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thrift.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-08-27")
public class Classes implements org.apache.thrift.TBase<Classes, Classes._Fields>, java.io.Serializable, Cloneable, Comparable<Classes> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Classes");

  private static final org.apache.thrift.protocol.TField STUDENT_SUM_FIELD_DESC = new org.apache.thrift.protocol.TField("studentSum", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField STUDENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("students", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField TEACHERS_FIELD_DESC = new org.apache.thrift.protocol.TField("teachers", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField CLASS_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("classNum", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField HEAD_TEACHER_FIELD_DESC = new org.apache.thrift.protocol.TField("headTeacher", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ClassesStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ClassesTupleSchemeFactory();

  public int studentSum; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<Student> students; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<Teacher> teachers; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String classNum; // required
  public @org.apache.thrift.annotation.Nullable Teacher headTeacher; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STUDENT_SUM((short)1, "studentSum"),
    STUDENTS((short)2, "students"),
    TEACHERS((short)3, "teachers"),
    CLASS_NUM((short)4, "classNum"),
    HEAD_TEACHER((short)5, "headTeacher");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STUDENT_SUM
          return STUDENT_SUM;
        case 2: // STUDENTS
          return STUDENTS;
        case 3: // TEACHERS
          return TEACHERS;
        case 4: // CLASS_NUM
          return CLASS_NUM;
        case 5: // HEAD_TEACHER
          return HEAD_TEACHER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STUDENTSUM_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STUDENT_SUM, new org.apache.thrift.meta_data.FieldMetaData("studentSum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STUDENTS, new org.apache.thrift.meta_data.FieldMetaData("students", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Student.class))));
    tmpMap.put(_Fields.TEACHERS, new org.apache.thrift.meta_data.FieldMetaData("teachers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Teacher.class))));
    tmpMap.put(_Fields.CLASS_NUM, new org.apache.thrift.meta_data.FieldMetaData("classNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HEAD_TEACHER, new org.apache.thrift.meta_data.FieldMetaData("headTeacher", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Teacher.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Classes.class, metaDataMap);
  }

  public Classes() {
  }

  public Classes(
    int studentSum,
    java.util.List<Student> students,
    java.util.List<Teacher> teachers,
    java.lang.String classNum,
    Teacher headTeacher)
  {
    this();
    this.studentSum = studentSum;
    setStudentSumIsSet(true);
    this.students = students;
    this.teachers = teachers;
    this.classNum = classNum;
    this.headTeacher = headTeacher;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Classes(Classes other) {
    __isset_bitfield = other.__isset_bitfield;
    this.studentSum = other.studentSum;
    if (other.isSetStudents()) {
      java.util.List<Student> __this__students = new java.util.ArrayList<Student>(other.students.size());
      for (Student other_element : other.students) {
        __this__students.add(new Student(other_element));
      }
      this.students = __this__students;
    }
    if (other.isSetTeachers()) {
      java.util.List<Teacher> __this__teachers = new java.util.ArrayList<Teacher>(other.teachers.size());
      for (Teacher other_element : other.teachers) {
        __this__teachers.add(new Teacher(other_element));
      }
      this.teachers = __this__teachers;
    }
    if (other.isSetClassNum()) {
      this.classNum = other.classNum;
    }
    if (other.isSetHeadTeacher()) {
      this.headTeacher = new Teacher(other.headTeacher);
    }
  }

  public Classes deepCopy() {
    return new Classes(this);
  }

  @Override
  public void clear() {
    setStudentSumIsSet(false);
    this.studentSum = 0;
    this.students = null;
    this.teachers = null;
    this.classNum = null;
    this.headTeacher = null;
  }

  public int getStudentSum() {
    return this.studentSum;
  }

  public Classes setStudentSum(int studentSum) {
    this.studentSum = studentSum;
    setStudentSumIsSet(true);
    return this;
  }

  public void unsetStudentSum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STUDENTSUM_ISSET_ID);
  }

  /** Returns true if field studentSum is set (has been assigned a value) and false otherwise */
  public boolean isSetStudentSum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STUDENTSUM_ISSET_ID);
  }

  public void setStudentSumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STUDENTSUM_ISSET_ID, value);
  }

  public int getStudentsSize() {
    return (this.students == null) ? 0 : this.students.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<Student> getStudentsIterator() {
    return (this.students == null) ? null : this.students.iterator();
  }

  public void addToStudents(Student elem) {
    if (this.students == null) {
      this.students = new java.util.ArrayList<Student>();
    }
    this.students.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<Student> getStudents() {
    return this.students;
  }

  public Classes setStudents(@org.apache.thrift.annotation.Nullable java.util.List<Student> students) {
    this.students = students;
    return this;
  }

  public void unsetStudents() {
    this.students = null;
  }

  /** Returns true if field students is set (has been assigned a value) and false otherwise */
  public boolean isSetStudents() {
    return this.students != null;
  }

  public void setStudentsIsSet(boolean value) {
    if (!value) {
      this.students = null;
    }
  }

  public int getTeachersSize() {
    return (this.teachers == null) ? 0 : this.teachers.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<Teacher> getTeachersIterator() {
    return (this.teachers == null) ? null : this.teachers.iterator();
  }

  public void addToTeachers(Teacher elem) {
    if (this.teachers == null) {
      this.teachers = new java.util.ArrayList<Teacher>();
    }
    this.teachers.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<Teacher> getTeachers() {
    return this.teachers;
  }

  public Classes setTeachers(@org.apache.thrift.annotation.Nullable java.util.List<Teacher> teachers) {
    this.teachers = teachers;
    return this;
  }

  public void unsetTeachers() {
    this.teachers = null;
  }

  /** Returns true if field teachers is set (has been assigned a value) and false otherwise */
  public boolean isSetTeachers() {
    return this.teachers != null;
  }

  public void setTeachersIsSet(boolean value) {
    if (!value) {
      this.teachers = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getClassNum() {
    return this.classNum;
  }

  public Classes setClassNum(@org.apache.thrift.annotation.Nullable java.lang.String classNum) {
    this.classNum = classNum;
    return this;
  }

  public void unsetClassNum() {
    this.classNum = null;
  }

  /** Returns true if field classNum is set (has been assigned a value) and false otherwise */
  public boolean isSetClassNum() {
    return this.classNum != null;
  }

  public void setClassNumIsSet(boolean value) {
    if (!value) {
      this.classNum = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public Teacher getHeadTeacher() {
    return this.headTeacher;
  }

  public Classes setHeadTeacher(@org.apache.thrift.annotation.Nullable Teacher headTeacher) {
    this.headTeacher = headTeacher;
    return this;
  }

  public void unsetHeadTeacher() {
    this.headTeacher = null;
  }

  /** Returns true if field headTeacher is set (has been assigned a value) and false otherwise */
  public boolean isSetHeadTeacher() {
    return this.headTeacher != null;
  }

  public void setHeadTeacherIsSet(boolean value) {
    if (!value) {
      this.headTeacher = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case STUDENT_SUM:
      if (value == null) {
        unsetStudentSum();
      } else {
        setStudentSum((java.lang.Integer)value);
      }
      break;

    case STUDENTS:
      if (value == null) {
        unsetStudents();
      } else {
        setStudents((java.util.List<Student>)value);
      }
      break;

    case TEACHERS:
      if (value == null) {
        unsetTeachers();
      } else {
        setTeachers((java.util.List<Teacher>)value);
      }
      break;

    case CLASS_NUM:
      if (value == null) {
        unsetClassNum();
      } else {
        setClassNum((java.lang.String)value);
      }
      break;

    case HEAD_TEACHER:
      if (value == null) {
        unsetHeadTeacher();
      } else {
        setHeadTeacher((Teacher)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STUDENT_SUM:
      return getStudentSum();

    case STUDENTS:
      return getStudents();

    case TEACHERS:
      return getTeachers();

    case CLASS_NUM:
      return getClassNum();

    case HEAD_TEACHER:
      return getHeadTeacher();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STUDENT_SUM:
      return isSetStudentSum();
    case STUDENTS:
      return isSetStudents();
    case TEACHERS:
      return isSetTeachers();
    case CLASS_NUM:
      return isSetClassNum();
    case HEAD_TEACHER:
      return isSetHeadTeacher();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Classes)
      return this.equals((Classes)that);
    return false;
  }

  public boolean equals(Classes that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_studentSum = true;
    boolean that_present_studentSum = true;
    if (this_present_studentSum || that_present_studentSum) {
      if (!(this_present_studentSum && that_present_studentSum))
        return false;
      if (this.studentSum != that.studentSum)
        return false;
    }

    boolean this_present_students = true && this.isSetStudents();
    boolean that_present_students = true && that.isSetStudents();
    if (this_present_students || that_present_students) {
      if (!(this_present_students && that_present_students))
        return false;
      if (!this.students.equals(that.students))
        return false;
    }

    boolean this_present_teachers = true && this.isSetTeachers();
    boolean that_present_teachers = true && that.isSetTeachers();
    if (this_present_teachers || that_present_teachers) {
      if (!(this_present_teachers && that_present_teachers))
        return false;
      if (!this.teachers.equals(that.teachers))
        return false;
    }

    boolean this_present_classNum = true && this.isSetClassNum();
    boolean that_present_classNum = true && that.isSetClassNum();
    if (this_present_classNum || that_present_classNum) {
      if (!(this_present_classNum && that_present_classNum))
        return false;
      if (!this.classNum.equals(that.classNum))
        return false;
    }

    boolean this_present_headTeacher = true && this.isSetHeadTeacher();
    boolean that_present_headTeacher = true && that.isSetHeadTeacher();
    if (this_present_headTeacher || that_present_headTeacher) {
      if (!(this_present_headTeacher && that_present_headTeacher))
        return false;
      if (!this.headTeacher.equals(that.headTeacher))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + studentSum;

    hashCode = hashCode * 8191 + ((isSetStudents()) ? 131071 : 524287);
    if (isSetStudents())
      hashCode = hashCode * 8191 + students.hashCode();

    hashCode = hashCode * 8191 + ((isSetTeachers()) ? 131071 : 524287);
    if (isSetTeachers())
      hashCode = hashCode * 8191 + teachers.hashCode();

    hashCode = hashCode * 8191 + ((isSetClassNum()) ? 131071 : 524287);
    if (isSetClassNum())
      hashCode = hashCode * 8191 + classNum.hashCode();

    hashCode = hashCode * 8191 + ((isSetHeadTeacher()) ? 131071 : 524287);
    if (isSetHeadTeacher())
      hashCode = hashCode * 8191 + headTeacher.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Classes other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetStudentSum()).compareTo(other.isSetStudentSum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStudentSum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.studentSum, other.studentSum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStudents()).compareTo(other.isSetStudents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStudents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.students, other.students);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTeachers()).compareTo(other.isSetTeachers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeachers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teachers, other.teachers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetClassNum()).compareTo(other.isSetClassNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClassNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.classNum, other.classNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHeadTeacher()).compareTo(other.isSetHeadTeacher());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeadTeacher()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headTeacher, other.headTeacher);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Classes(");
    boolean first = true;

    sb.append("studentSum:");
    sb.append(this.studentSum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("students:");
    if (this.students == null) {
      sb.append("null");
    } else {
      sb.append(this.students);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("teachers:");
    if (this.teachers == null) {
      sb.append("null");
    } else {
      sb.append(this.teachers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("classNum:");
    if (this.classNum == null) {
      sb.append("null");
    } else {
      sb.append(this.classNum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("headTeacher:");
    if (this.headTeacher == null) {
      sb.append("null");
    } else {
      sb.append(this.headTeacher);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (headTeacher != null) {
      headTeacher.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ClassesStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ClassesStandardScheme getScheme() {
      return new ClassesStandardScheme();
    }
  }

  private static class ClassesStandardScheme extends org.apache.thrift.scheme.StandardScheme<Classes> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Classes struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STUDENT_SUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.studentSum = iprot.readI32();
              struct.setStudentSumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STUDENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.students = new java.util.ArrayList<Student>(_list8.size);
                @org.apache.thrift.annotation.Nullable Student _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new Student();
                  _elem9.read(iprot);
                  struct.students.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setStudentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TEACHERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                struct.teachers = new java.util.ArrayList<Teacher>(_list11.size);
                @org.apache.thrift.annotation.Nullable Teacher _elem12;
                for (int _i13 = 0; _i13 < _list11.size; ++_i13)
                {
                  _elem12 = new Teacher();
                  _elem12.read(iprot);
                  struct.teachers.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setTeachersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CLASS_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.classNum = iprot.readString();
              struct.setClassNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HEAD_TEACHER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.headTeacher = new Teacher();
              struct.headTeacher.read(iprot);
              struct.setHeadTeacherIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Classes struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(STUDENT_SUM_FIELD_DESC);
      oprot.writeI32(struct.studentSum);
      oprot.writeFieldEnd();
      if (struct.students != null) {
        oprot.writeFieldBegin(STUDENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.students.size()));
          for (Student _iter14 : struct.students)
          {
            _iter14.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.teachers != null) {
        oprot.writeFieldBegin(TEACHERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.teachers.size()));
          for (Teacher _iter15 : struct.teachers)
          {
            _iter15.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.classNum != null) {
        oprot.writeFieldBegin(CLASS_NUM_FIELD_DESC);
        oprot.writeString(struct.classNum);
        oprot.writeFieldEnd();
      }
      if (struct.headTeacher != null) {
        oprot.writeFieldBegin(HEAD_TEACHER_FIELD_DESC);
        struct.headTeacher.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ClassesTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ClassesTupleScheme getScheme() {
      return new ClassesTupleScheme();
    }
  }

  private static class ClassesTupleScheme extends org.apache.thrift.scheme.TupleScheme<Classes> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Classes struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetStudentSum()) {
        optionals.set(0);
      }
      if (struct.isSetStudents()) {
        optionals.set(1);
      }
      if (struct.isSetTeachers()) {
        optionals.set(2);
      }
      if (struct.isSetClassNum()) {
        optionals.set(3);
      }
      if (struct.isSetHeadTeacher()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetStudentSum()) {
        oprot.writeI32(struct.studentSum);
      }
      if (struct.isSetStudents()) {
        {
          oprot.writeI32(struct.students.size());
          for (Student _iter16 : struct.students)
          {
            _iter16.write(oprot);
          }
        }
      }
      if (struct.isSetTeachers()) {
        {
          oprot.writeI32(struct.teachers.size());
          for (Teacher _iter17 : struct.teachers)
          {
            _iter17.write(oprot);
          }
        }
      }
      if (struct.isSetClassNum()) {
        oprot.writeString(struct.classNum);
      }
      if (struct.isSetHeadTeacher()) {
        struct.headTeacher.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Classes struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.studentSum = iprot.readI32();
        struct.setStudentSumIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.students = new java.util.ArrayList<Student>(_list18.size);
          @org.apache.thrift.annotation.Nullable Student _elem19;
          for (int _i20 = 0; _i20 < _list18.size; ++_i20)
          {
            _elem19 = new Student();
            _elem19.read(iprot);
            struct.students.add(_elem19);
          }
        }
        struct.setStudentsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.teachers = new java.util.ArrayList<Teacher>(_list21.size);
          @org.apache.thrift.annotation.Nullable Teacher _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new Teacher();
            _elem22.read(iprot);
            struct.teachers.add(_elem22);
          }
        }
        struct.setTeachersIsSet(true);
      }
      if (incoming.get(3)) {
        struct.classNum = iprot.readString();
        struct.setClassNumIsSet(true);
      }
      if (incoming.get(4)) {
        struct.headTeacher = new Teacher();
        struct.headTeacher.read(iprot);
        struct.setHeadTeacherIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

